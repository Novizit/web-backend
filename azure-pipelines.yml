trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '18.x'
  resourceGroupName: 'Data_base'
  appServiceName: 'real-estate-backend'
  location: 'East US'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'

    - script: |
        npm ci --only=production
      displayName: 'Install production dependencies'

    - script: |
        npm run build
      displayName: 'Build application'

    - script: |
        npm run lint
      displayName: 'Run linting'

    # Create optimized deployment package
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
      displayName: 'Create deployment package'

    # Copy necessary files for deployment
    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
        cp -r dist/* $(Build.ArtifactStagingDirectory)/deploy/
        cp package.json $(Build.ArtifactStagingDirectory)/deploy/
        cp startup.sh $(Build.ArtifactStagingDirectory)/deploy/
        cp -r prisma $(Build.ArtifactStagingDirectory)/deploy/
        cd $(Build.ArtifactStagingDirectory)/deploy
        npm ci --only=production
        cd ..
        zip -r backend-deploy.zip deploy/
      displayName: 'Create optimized deployment package'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend-deploy.zip'
        ArtifactName: 'backend-deploy'
        publishLocation: 'Container'
      displayName: 'Publish optimized artifacts'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure App Service'
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              appName: $(appServiceName)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/backend-deploy/backend-deploy.zip'
              appType: 'webAppLinux'
              runtimeStack: 'NODE|18-lts'
              startUpCommand: 'chmod +x startup.sh && ./startup.sh'
              
          - script: |
              az webapp config set \
                --resource-group $(resourceGroupName) \
                --name $(appServiceName) \
                --always-on true
            displayName: 'Configure Always On'
            
          - script: |
              az webapp config set \
                --resource-group $(resourceGroupName) \
                --name $(appServiceName) \
                --generic-configurations '{"idleTimeoutInMinutes": 0}'
            displayName: 'Configure Idle Timeout' 